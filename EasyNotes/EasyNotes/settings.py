"""
Django settings for EasyNotes project.

Generated by 'django-admin startproject' using Django 5.2.5.
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Get the secret key from an environment variable.
# Generate a new one for production and set it in Render.
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-yd!*#4^!2fe-*tdv3+9i*)iao-qcniw57)uuin1fni9*l6mn4x')

# DEBUG is set to False in production. Render sets the 'RENDER' env var.
DEBUG = 'RENDER' not in os.environ

# Allow all hosts for now (later you can restrict to your Render domain)
ALLOWED_HOSTS = ["*"]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'EasyNotes.Notes.apps.NotesConfig',
    'EasyNotes.accounts.apps.AccountsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # ðŸ‘ˆ Added for static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'EasyNotes.EasyNotes.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'EasyNotes' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'EasyNotes.EasyNotes.wsgi.application'

# Database configuration
if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=600, ssl_require=True)
    }
else:
    # Fallback to local database if DATABASE_URL is not set
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'mallem',
            'USER': 'postgres',
            'PASSWORD': '001729',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
# Add this line to tell Whitenoise to also look for files in your media directory
STATICFILES_DIRS = [
    BASE_DIR / 'EasyNotes' / 'static',
]

# The absolute path to the directory where collectstatic will collect all static files.
# Whitenoise will serve files from this directory in production.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Whitenoise static file storage
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media files
MEDIA_URL = '/media/'
if 'RENDER' in os.environ:
    MEDIA_ROOT = '/var/data/media'
else:
    MEDIA_ROOT = BASE_DIR / 'media'

# Authentication redirects
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'note_list'
LOGOUT_REDIRECT_URL = 'login'

# Optional: LibreOffice path for file conversion (Windows only)
SOFFICE_PATH = None

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
